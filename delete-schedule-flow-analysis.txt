# Delete Schedule 버튼 클릭 시 전체 흐름 분석

## 1. 초기 상태 (Calendar.tsx)
- isEditModalOpen: false
- selectedEvent: null  
- events: 전체 이벤트 배열

## 2. 이벤트 클릭 시 흐름

### 2-1. 캘린더에서 이벤트 클릭
```
사용자가 캘린더의 scheduled 상태 이벤트 클릭
↓
handleEventClick(event) 함수 호출
↓
상태 변경:
- setSelectedEvent(event) → 클릭한 이벤트 객체 저장
- setIsEditModalOpen(true) → EditPostModal 열기
```

### 2-2. EditPostModal 렌더링
```
Calendar.tsx에서 EditPostModal 컴포넌트 렌더링
↓
Props 전달:
- isOpen: isEditModalOpen (true)
- event: selectedEvent (클릭한 이벤트)
- onEventUpdate: handleEventUpdate 함수
- onEventDelete: handleEventDelete 함수
- onOpenChange: setIsEditModalOpen 함수
```

## 3. Delete Schedule 버튼 클릭 흐름

### 3-1. Delete Schedule 버튼 클릭
```
EditPostModal.tsx 내부의 AlertDialog 컴포넌트
↓
AlertDialogTrigger 버튼 클릭 (Delete Schedule)
↓
setIsAlertDialogOpen(true) → AlertDialog 열림
```

### 3-2. AlertDialog 상태 (수정됨)
```
AlertDialog가 열린 상태:
- EditPostModal은 여전히 열린 상태
- AlertDialog는 EditPostModal 위에 오버레이로 표시
- isAlertDialogOpen: true (직접 관리)
```

### 3-3. AlertDialog 확인 버튼 클릭
```
AlertDialogAction 버튼 클릭 ("확인")
↓
onClick={handleDelete} 실행
↓
handleDelete 함수 내부 로직:
1. if (!event) return → 이벤트 존재 확인
2. onEventDelete(event.id) → Calendar의 handleEventDelete 호출 (비동기, await 없음)
3. onOpenChange(false) → EditPostModal 즉시 닫기
4. setIsAlertDialogOpen(false) → AlertDialog 닫기 (하지만 EditPostModal이 이미 언마운트됨)
```

## 4. 삭제 처리 흐름 (Calendar.tsx의 handleEventDelete)

### 4-1. 서버 액션 호출
```
handleEventDelete(eventId) 함수 실행 (비동기)
↓
deleteSchedule(eventId) 서버 액션 호출
↓
Supabase에서 해당 이벤트 삭제
```

### 4-2. 클라이언트 상태 업데이트
```
삭제 성공 시:
↓
setEvents(events.filter(event => event.id !== eventId))
→ events 배열에서 해당 이벤트 제거
```

## 5. Modal 닫기 흐름

### 5-1. EditPostModal 닫기
```
handleDelete에서 onOpenChange(false) 호출
↓
Calendar.tsx의 setIsEditModalOpen(false) 실행
↓
EditPostModal 즉시 언마운트
```

### 5-2. 최종 상태
```
- isEditModalOpen: false
- selectedEvent: 이전 값 유지 (null로 초기화되지 않음)
- events: 삭제된 이벤트가 제거된 배열 (비동기적으로)
- AlertDialog: setIsAlertDialogOpen(false) 호출되지만 컴포넌트가 이미 언마운트됨
```

## 6. 상태 관리 문제점 분석

### 6-1. selectedEvent 정리 누락
```
문제: EditPostModal이 닫힐 때 selectedEvent가 null로 초기화되지 않음
결과: 이전 선택된 이벤트 정보가 메모리에 남아있음
```

### 6-2. 🚨 비동기 처리 문제 (핵심 문제)
```
문제: 
- onEventDelete(event.id) 는 비동기 함수 (Calendar.tsx의 handleEventDelete)
- 하지만 EditPostModal에서 await 없이 호출
- 삭제 완료 전에 onOpenChange(false)로 모달을 즉시 닫음

결과:
- 삭제 중 에러 발생해도 사용자가 모름
- 삭제 완료 확인 없이 UI가 닫힘
- AlertDialog 상태가 제대로 정리되지 않을 수 있음
```

### 6-3. 🚨 컴포넌트 언마운트 순서 문제
```
현재 순서:
1. onEventDelete(event.id) - 비동기 시작
2. onOpenChange(false) - EditPostModal 즉시 언마운트
3. setIsAlertDialogOpen(false) - 언마운트된 컴포넌트의 상태 변경 시도

문제:
- setIsAlertDialogOpen(false)가 효과 없음
- React에서 언마운트된 컴포넌트의 상태 변경 시 경고 발생 가능
```

### 6-4. 중첩된 Dialog 관리
```
현재 구조:
Dialog (EditPostModal)
  └── AlertDialog (삭제 확인)

문제점:
- AlertDialog가 열릴 때 EditPostModal 상태와 독립적
- 두 dialog의 z-index 관리
- ESC 키 처리 시 어떤 dialog가 닫힐지 불명확
```

### 6-5. 에러 처리 부족
```
handleEventDelete에서:
- deleteSchedule 실패 시 UI 상태 롤백 없음
- 사용자에게 에러 알림 없음
- 낙관적 업데이트(optimistic update) 미적용
```

## 7. 개선 제안

### 7-1. 🎯 비동기 처리 개선 (우선순위 1)
```javascript
const handleDelete = async () => {
  if (!event) return
  
  // 1. AlertDialog 먼저 닫기
  setIsAlertDialogOpen(false)
  
  try {
    // 2. 삭제 완료까지 대기
    await onEventDelete(event.id)
    
    // 3. 삭제 성공 후 EditPostModal 닫기
    onOpenChange(false)
  } catch (error) {
    // 4. 에러 발생 시 사용자에게 알림
    console.error('삭제 실패:', error)
    // toast 알림 추가 가능
  }
}
```

### 7-2. onEventDelete 함수 타입 변경
```javascript
// Calendar.tsx에서
const handleEventDelete = async (eventId: string): Promise<void> => {
  try {
    const { error } = await deleteSchedule(eventId)
    if (error) throw error
    
    setEvents(events.filter(event => event.id !== eventId))
  } catch (error) {
    console.error('Error deleting event:', error)
    throw error // 에러를 다시 throw해서 EditPostModal에서 처리 가능
  }
}
```

### 7-3. selectedEvent 정리
```
EditPostModal의 onOpenChange에서:
if (!isOpen) {
  setSelectedEvent(null)
}
```

### 7-4. 에러 처리 강화
```
try-catch 블록 추가
실패 시 toast 알림
낙관적 업데이트 적용
```

### 7-5. Dialog 상태 개선
```
AlertDialog 상태를 EditPostModal에서 직접 관리 ✅ (완료)
또는 삭제 확인을 별도 컴포넌트로 분리
```

## 8. 🔍 디버깅 방법

### 8-1. 실행 순서 확인
```javascript
const handleDelete = () => {
  console.log('1. handleDelete 시작')
  if (!event) return
  
  console.log('2. onEventDelete 호출 전')
  onEventDelete(event.id)
  console.log('3. onEventDelete 호출 후 (비동기)')
  
  console.log('4. onOpenChange 호출 전')
  onOpenChange(false)
  console.log('5. onOpenChange 호출 후')
  
  console.log('6. setIsAlertDialogOpen 호출 전')
  setIsAlertDialogOpen(false)
  console.log('7. setIsAlertDialogOpen 호출 후')
}
```

### 8-2. React DevTools로 상태 변화 모니터링
```
- isEditModalOpen 상태 변화
- isAlertDialogOpen 상태 변화
- selectedEvent 상태 변화
- events 배열 변화
``` 